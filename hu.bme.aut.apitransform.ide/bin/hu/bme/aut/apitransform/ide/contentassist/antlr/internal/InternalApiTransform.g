/*
 * generated by Xtext 2.16.0
 */
grammar InternalApiTransform;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package hu.bme.aut.apitransform.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package hu.bme.aut.apitransform.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import hu.bme.aut.apitransform.services.ApiTransformGrammarAccess;

}
@parser::members {
	private ApiTransformGrammarAccess grammarAccess;

	public void setGrammarAccess(ApiTransformGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getTransformationsAssignment()); }
		(rule__Model__TransformationsAssignment)*
		{ after(grammarAccess.getModelAccess().getTransformationsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTransformation
entryRuleTransformation
:
{ before(grammarAccess.getTransformationRule()); }
	 ruleTransformation
{ after(grammarAccess.getTransformationRule()); } 
	 EOF 
;

// Rule Transformation
ruleTransformation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTransformationAccess().getGroup()); }
		(rule__Transformation__Group__0)
		{ after(grammarAccess.getTransformationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTarget
entryRuleTarget
:
{ before(grammarAccess.getTargetRule()); }
	 ruleTarget
{ after(grammarAccess.getTargetRule()); } 
	 EOF 
;

// Rule Target
ruleTarget 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTargetAccess().getGroup()); }
		(rule__Target__Group__0)
		{ after(grammarAccess.getTargetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionPrefix
entryRuleFunctionPrefix
:
{ before(grammarAccess.getFunctionPrefixRule()); }
	 ruleFunctionPrefix
{ after(grammarAccess.getFunctionPrefixRule()); } 
	 EOF 
;

// Rule FunctionPrefix
ruleFunctionPrefix 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionPrefixAccess().getGroup()); }
		(rule__FunctionPrefix__Group__0)
		{ after(grammarAccess.getFunctionPrefixAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getNameAssignment()); }
		(rule__Parameter__NameAssignment)
		{ after(grammarAccess.getParameterAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transformation__Group__0__Impl
	rule__Transformation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformationAccess().getSourceAssignment_0()); }
	(rule__Transformation__SourceAssignment_0)
	{ after(grammarAccess.getTransformationAccess().getSourceAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transformation__Group__1__Impl
	rule__Transformation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformationAccess().getEqualsSignGreaterThanSignKeyword_1()); }
	'=>'
	{ after(grammarAccess.getTransformationAccess().getEqualsSignGreaterThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transformation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformationAccess().getTargetAssignment_2()); }
	(rule__Transformation__TargetAssignment_2)
	{ after(grammarAccess.getTransformationAccess().getTargetAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Target__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Target__Group__0__Impl
	rule__Target__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetAccess().getStaticAssignment_0()); }
	(rule__Target__StaticAssignment_0)?
	{ after(grammarAccess.getTargetAccess().getStaticAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Target__Group__1__Impl
	rule__Target__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetAccess().getPrefixAssignment_1()); }
	(rule__Target__PrefixAssignment_1)?
	{ after(grammarAccess.getTargetAccess().getPrefixAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Target__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetAccess().getFunctionAssignment_2()); }
	(rule__Target__FunctionAssignment_2)
	{ after(grammarAccess.getTargetAccess().getFunctionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionPrefix__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionPrefix__Group__0__Impl
	rule__FunctionPrefix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPrefix__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionPrefixAccess().getPrefixesAssignment_0()); }
	(rule__FunctionPrefix__PrefixesAssignment_0)
	{ after(grammarAccess.getFunctionPrefixAccess().getPrefixesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPrefix__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionPrefix__Group__1__Impl
	rule__FunctionPrefix__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPrefix__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionPrefixAccess().getGroup_1()); }
	(rule__FunctionPrefix__Group_1__0)*
	{ after(grammarAccess.getFunctionPrefixAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPrefix__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionPrefix__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPrefix__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionPrefixAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getFunctionPrefixAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionPrefix__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionPrefix__Group_1__0__Impl
	rule__FunctionPrefix__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPrefix__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionPrefixAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getFunctionPrefixAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPrefix__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionPrefix__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPrefix__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionPrefixAccess().getPrefixesAssignment_1_1()); }
	(rule__FunctionPrefix__PrefixesAssignment_1_1)
	{ after(grammarAccess.getFunctionPrefixAccess().getPrefixesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_0()); }
	(rule__Function__NameAssignment_0)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getParametersAssignment_2()); }
	(rule__Function__ParametersAssignment_2)*
	{ after(grammarAccess.getFunctionAccess().getParametersAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__TransformationsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getTransformationsTransformationParserRuleCall_0()); }
		ruleTransformation
		{ after(grammarAccess.getModelAccess().getTransformationsTransformationParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__SourceAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransformationAccess().getSourceFunctionParserRuleCall_0_0()); }
		ruleFunction
		{ after(grammarAccess.getTransformationAccess().getSourceFunctionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__TargetAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransformationAccess().getTargetTargetParserRuleCall_2_0()); }
		ruleTarget
		{ after(grammarAccess.getTransformationAccess().getTargetTargetParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__StaticAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetAccess().getStaticStaticKeyword_0_0()); }
		(
			{ before(grammarAccess.getTargetAccess().getStaticStaticKeyword_0_0()); }
			'static'
			{ after(grammarAccess.getTargetAccess().getStaticStaticKeyword_0_0()); }
		)
		{ after(grammarAccess.getTargetAccess().getStaticStaticKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__PrefixAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetAccess().getPrefixFunctionPrefixParserRuleCall_1_0()); }
		ruleFunctionPrefix
		{ after(grammarAccess.getTargetAccess().getPrefixFunctionPrefixParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__FunctionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetAccess().getFunctionFunctionParserRuleCall_2_0()); }
		ruleFunction
		{ after(grammarAccess.getTargetAccess().getFunctionFunctionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPrefix__PrefixesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionPrefixAccess().getPrefixesIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionPrefixAccess().getPrefixesIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionPrefix__PrefixesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionPrefixAccess().getPrefixesIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionPrefixAccess().getPrefixesIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ParametersAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getParametersParameterParserRuleCall_2_0()); }
		ruleParameter
		{ after(grammarAccess.getFunctionAccess().getParametersParameterParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
