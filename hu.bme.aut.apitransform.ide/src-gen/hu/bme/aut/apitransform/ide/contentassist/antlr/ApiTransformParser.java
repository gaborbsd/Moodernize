/*
 * generated by Xtext 2.16.0
 */
package hu.bme.aut.apitransform.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import hu.bme.aut.apitransform.ide.contentassist.antlr.internal.InternalApiTransformParser;
import hu.bme.aut.apitransform.services.ApiTransformGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ApiTransformParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ApiTransformGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ApiTransformGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTransformationAccess().getGroup(), "rule__Transformation__Group__0");
			builder.put(grammarAccess.getTargetAccess().getGroup(), "rule__Target__Group__0");
			builder.put(grammarAccess.getFunctionPrefixAccess().getGroup(), "rule__FunctionPrefix__Group__0");
			builder.put(grammarAccess.getFunctionPrefixAccess().getGroup_1(), "rule__FunctionPrefix__Group_1__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getModelAccess().getTransformationsAssignment(), "rule__Model__TransformationsAssignment");
			builder.put(grammarAccess.getTransformationAccess().getSourceAssignment_0(), "rule__Transformation__SourceAssignment_0");
			builder.put(grammarAccess.getTransformationAccess().getTargetAssignment_2(), "rule__Transformation__TargetAssignment_2");
			builder.put(grammarAccess.getTargetAccess().getStaticAssignment_0(), "rule__Target__StaticAssignment_0");
			builder.put(grammarAccess.getTargetAccess().getPrefixAssignment_1(), "rule__Target__PrefixAssignment_1");
			builder.put(grammarAccess.getTargetAccess().getFunctionAssignment_2(), "rule__Target__FunctionAssignment_2");
			builder.put(grammarAccess.getFunctionPrefixAccess().getPrefixesAssignment_0(), "rule__FunctionPrefix__PrefixesAssignment_0");
			builder.put(grammarAccess.getFunctionPrefixAccess().getPrefixesAssignment_1_1(), "rule__FunctionPrefix__PrefixesAssignment_1_1");
			builder.put(grammarAccess.getFunctionAccess().getNameAssignment_0(), "rule__Function__NameAssignment_0");
			builder.put(grammarAccess.getFunctionAccess().getParametersAssignment_2(), "rule__Function__ParametersAssignment_2");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment(), "rule__Parameter__NameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ApiTransformGrammarAccess grammarAccess;

	@Override
	protected InternalApiTransformParser createParser() {
		InternalApiTransformParser result = new InternalApiTransformParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ApiTransformGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ApiTransformGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
