/*
 * generated by Xtext 2.16.0
 */
package hu.bme.aut.apitransform.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ApiTransformGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.apitransform.ApiTransform.Model");
		private final Assignment cTransformationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTransformationsTransformationParserRuleCall_0 = (RuleCall)cTransformationsAssignment.eContents().get(0);
		
		//Model:
		//	transformations+=Transformation*;
		@Override public ParserRule getRule() { return rule; }
		
		//transformations+=Transformation*
		public Assignment getTransformationsAssignment() { return cTransformationsAssignment; }
		
		//Transformation
		public RuleCall getTransformationsTransformationParserRuleCall_0() { return cTransformationsTransformationParserRuleCall_0; }
	}
	public class TransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.apitransform.ApiTransform.Transformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSourceFunctionParserRuleCall_0_0 = (RuleCall)cSourceAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetTargetParserRuleCall_2_0 = (RuleCall)cTargetAssignment_2.eContents().get(0);
		
		//Transformation:
		//	source=Function '=>' target=Target;
		@Override public ParserRule getRule() { return rule; }
		
		//source=Function '=>' target=Target
		public Group getGroup() { return cGroup; }
		
		//source=Function
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//Function
		public RuleCall getSourceFunctionParserRuleCall_0_0() { return cSourceFunctionParserRuleCall_0_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//target=Target
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//Target
		public RuleCall getTargetTargetParserRuleCall_2_0() { return cTargetTargetParserRuleCall_2_0; }
	}
	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.apitransform.ApiTransform.Target");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStaticAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStaticStaticKeyword_0_0 = (Keyword)cStaticAssignment_0.eContents().get(0);
		private final Assignment cPrefixAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixFunctionPrefixParserRuleCall_1_0 = (RuleCall)cPrefixAssignment_1.eContents().get(0);
		private final Assignment cFunctionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionFunctionParserRuleCall_2_0 = (RuleCall)cFunctionAssignment_2.eContents().get(0);
		
		//Target:
		//	static?='static'? prefix=FunctionPrefix? function=Function;
		@Override public ParserRule getRule() { return rule; }
		
		//static?='static'? prefix=FunctionPrefix? function=Function
		public Group getGroup() { return cGroup; }
		
		//static?='static'?
		public Assignment getStaticAssignment_0() { return cStaticAssignment_0; }
		
		//'static'
		public Keyword getStaticStaticKeyword_0_0() { return cStaticStaticKeyword_0_0; }
		
		//prefix=FunctionPrefix?
		public Assignment getPrefixAssignment_1() { return cPrefixAssignment_1; }
		
		//FunctionPrefix
		public RuleCall getPrefixFunctionPrefixParserRuleCall_1_0() { return cPrefixFunctionPrefixParserRuleCall_1_0; }
		
		//function=Function
		public Assignment getFunctionAssignment_2() { return cFunctionAssignment_2; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_2_0() { return cFunctionFunctionParserRuleCall_2_0; }
	}
	public class FunctionPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.apitransform.ApiTransform.FunctionPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrefixesIDTerminalRuleCall_0_0 = (RuleCall)cPrefixesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPrefixesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrefixesIDTerminalRuleCall_1_1_0 = (RuleCall)cPrefixesAssignment_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FunctionPrefix:
		//	prefixes+=ID ('.' prefixes+=ID)* '.';
		@Override public ParserRule getRule() { return rule; }
		
		//prefixes+=ID ('.' prefixes+=ID)* '.'
		public Group getGroup() { return cGroup; }
		
		//prefixes+=ID
		public Assignment getPrefixesAssignment_0() { return cPrefixesAssignment_0; }
		
		//ID
		public RuleCall getPrefixesIDTerminalRuleCall_0_0() { return cPrefixesIDTerminalRuleCall_0_0; }
		
		//('.' prefixes+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//prefixes+=ID
		public Assignment getPrefixesAssignment_1_1() { return cPrefixesAssignment_1_1; }
		
		//ID
		public RuleCall getPrefixesIDTerminalRuleCall_1_1_0() { return cPrefixesIDTerminalRuleCall_1_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.apitransform.ApiTransform.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Function:
		//	name=ID '(' parameters+=Parameter* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' parameters+=Parameter* ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parameters+=Parameter*
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_0() { return cParametersParameterParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.apitransform.ApiTransform.Parameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Parameter:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final TransformationElements pTransformation;
	private final TargetElements pTarget;
	private final FunctionPrefixElements pFunctionPrefix;
	private final FunctionElements pFunction;
	private final ParameterElements pParameter;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ApiTransformGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTransformation = new TransformationElements();
		this.pTarget = new TargetElements();
		this.pFunctionPrefix = new FunctionPrefixElements();
		this.pFunction = new FunctionElements();
		this.pParameter = new ParameterElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.aut.apitransform.ApiTransform".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	transformations+=Transformation*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Transformation:
	//	source=Function '=>' target=Target;
	public TransformationElements getTransformationAccess() {
		return pTransformation;
	}
	
	public ParserRule getTransformationRule() {
		return getTransformationAccess().getRule();
	}
	
	//Target:
	//	static?='static'? prefix=FunctionPrefix? function=Function;
	public TargetElements getTargetAccess() {
		return pTarget;
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}
	
	//FunctionPrefix:
	//	prefixes+=ID ('.' prefixes+=ID)* '.';
	public FunctionPrefixElements getFunctionPrefixAccess() {
		return pFunctionPrefix;
	}
	
	public ParserRule getFunctionPrefixRule() {
		return getFunctionPrefixAccess().getRule();
	}
	
	//Function:
	//	name=ID '(' parameters+=Parameter* ')';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Parameter:
	//	name=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
