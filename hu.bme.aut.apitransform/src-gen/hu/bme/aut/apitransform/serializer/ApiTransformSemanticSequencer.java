/*
 * generated by Xtext 2.16.0
 */
package hu.bme.aut.apitransform.serializer;

import com.google.inject.Inject;
import hu.bme.aut.apitransform.apiTransform.ApiTransformPackage;
import hu.bme.aut.apitransform.apiTransform.Function;
import hu.bme.aut.apitransform.apiTransform.FunctionPrefix;
import hu.bme.aut.apitransform.apiTransform.Model;
import hu.bme.aut.apitransform.apiTransform.Target;
import hu.bme.aut.apitransform.apiTransform.Transformation;
import hu.bme.aut.apitransform.services.ApiTransformGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ApiTransformSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ApiTransformGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ApiTransformPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ApiTransformPackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case ApiTransformPackage.FUNCTION_PREFIX:
				sequence_FunctionPrefix(context, (FunctionPrefix) semanticObject); 
				return; 
			case ApiTransformPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case ApiTransformPackage.PARAMETER:
				sequence_Parameter(context, (hu.bme.aut.apitransform.apiTransform.Parameter) semanticObject); 
				return; 
			case ApiTransformPackage.TARGET:
				sequence_Target(context, (Target) semanticObject); 
				return; 
			case ApiTransformPackage.TRANSFORMATION:
				sequence_Transformation(context, (Transformation) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     FunctionPrefix returns FunctionPrefix
	 *
	 * Constraint:
	 *     (prefixes+=ID prefixes+=ID*)
	 */
	protected void sequence_FunctionPrefix(ISerializationContext context, FunctionPrefix semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Function
	 *
	 * Constraint:
	 *     (name=ID parameters+=Parameter*)
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     transformations+=Transformation+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Parameter(ISerializationContext context, hu.bme.aut.apitransform.apiTransform.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ApiTransformPackage.Literals.PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ApiTransformPackage.Literals.PARAMETER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Target returns Target
	 *
	 * Constraint:
	 *     (static?='static'? prefix=FunctionPrefix? function=Function)
	 */
	protected void sequence_Target(ISerializationContext context, Target semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transformation returns Transformation
	 *
	 * Constraint:
	 *     (source=Function target=Target)
	 */
	protected void sequence_Transformation(ISerializationContext context, Transformation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ApiTransformPackage.Literals.TRANSFORMATION__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ApiTransformPackage.Literals.TRANSFORMATION__SOURCE));
			if (transientValues.isValueTransient(semanticObject, ApiTransformPackage.Literals.TRANSFORMATION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ApiTransformPackage.Literals.TRANSFORMATION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransformationAccess().getSourceFunctionParserRuleCall_0_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getTransformationAccess().getTargetTargetParserRuleCall_2_0(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
}
